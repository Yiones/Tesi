var bannerboy = bannerboy || {};
bannerboy.main = function() {

	var width = bannerboy.utils.getDimensions().width;
	var height = bannerboy.utils.getDimensions().height;
	var backgroundColor = '#ffffff';
	var coverColor = '#ffffff';
	var loops = 3;
	var animation;
	var mainTl;
	var mouseObj = {x:width / 2, y:height / 2};
	var debug = window.location.protocol == "file:";

	var browser = new bannerboy.detectBrowser();
	if(!browser.chrome()) bannerboy.defaults.rotationZ = 0.001;
	if(browser.chrome()) bannerboy.defaults.webkitPerspective = 1000;

	var banner = bannerboy.createElement({id: "banner", width: width, height: height, backgroundColor: backgroundColor, overflow: "hidden", cursor: "pointer", parent: document.body});

	var images = [
		"bg_0.jpg",
		"bg_1.png",
		"person.png",
		"logo.png",
	];

	bannerboy.preloadImages(images, function() {

		/* Create elements
		================================================= */

		/* eslint-disable indent */

		var bg_all_holder = bannerboy.createElement({left: -19, top: -14, width: 198, height: 626, parent: banner});
			var bg_holder = bannerboy.createElement({width: 198, height: 626, parent: bg_all_holder});
				var bg_0_in = bannerboy.createElement({width: 198, height: 605, parent: bg_holder});
					var bg_0 = bannerboy.createElement({backgroundImage: "bg_0.jpg", retina: true, parent: bg_0_in});
				var bg_1_in = bannerboy.createElement({left: 93, top: 252, width: 106, height: 374, parent: bg_holder});
					var bg_1 = bannerboy.createElement({backgroundImage: "bg_1.png", retina: true, parent: bg_1_in});
			var person_holder = bannerboy.createElement({top: 70, width: 198, height: 557, parent: bg_all_holder});
				var person_in = bannerboy.createElement({width: 198, height: 557, parent: person_holder});
					var person = bannerboy.createElement({backgroundImage: "person.png", retina: true, parent: person_in});
		var logo_holder = bannerboy.createElement({left: 26, top: 36, width: 109, height: 39, parent: banner});
			var logo = bannerboy.createElement({backgroundImage: "logo.png", retina: true, parent: logo_holder});

		/* eslint-enable indent */

		/* Set
		================================================= */

		var banner_cover = bannerboy.createElement({id: "banner_cover", backgroundColor:coverColor, width: width, height: height, parent: banner});
		var border = bannerboy.createElement({id: "border", width: width, height: height, border:"1px solid #dddddd", boxSizing:'border-box', parent: banner});

		/* Initiate
		================================================= */

		TweenMax.set(bg_0, {transformOrigin:'50% 50%'});
		TweenMax.set(bg_1, {transformOrigin:'50% 50%'});
		TweenMax.set(person, {transformOrigin:'30% 50%'});

		animations();
		timeline();
		interaction();

		/* Animations
		================================================= */

		function timeline() {

			if(debug) console.time('bannerTime');

			mainTl = new BBTimeline()
			.add("loop")
			.to(banner_cover, .5, {autoAlpha:0, ease: Power1.easeOut})
			.offset()
			.from(bg_0, 2.5, {  scale:1.25, x:25, ease: Expo.easeInOut})
			.from(bg_1, 2.5, {  scale:1.15, x:15, y:60, ease: Expo.easeInOut})
			.from(person, 2.5, {scale:1.3,  x:-15, ease: Expo.easeInOut})
			.from(logo, 2.5, {scale:.9, alpha:0, ease: Expo.easeInOut})
			.offset()
			.from(person_holder, 8, {scale:1.1,  ease: Linear.easeNone})
			.from(bg_holder, 8, {scale:1.05, ease: Linear.easeNone})
			.from(logo_holder, 8, { scale:.9,  ease: Linear.easeNone})
			.offset(2.5)
			.call(startMouseInteractivity)
			.chain(5)
			.call(function()
			{
				loops--;
				if(loops <= 0)
				{
					if(debug) console.timeEnd('bannerTime');
					mainTl.pause();
				}
			})
			.call(stopMouseInteractivity)
			.to(banner_cover, .45, {autoAlpha:1, ease: Power2.easeIn})
			.chain(.1)
			.call(function() {
				mainTl.seek("loop");
			});

			scrubber(mainTl);
		}

		function animations() {
			animation = {

				show: function(div)
				{
					return new BBTimeline()
					.from(div, .5, { autoAlpha:0, ease:Power1.easeOut});
				},
				hide: function(div)
				{
					return new BBTimeline()
					.to(div, .5, { autoAlpha:0, ease:Power1.easeOut});
				}
			};
		}

		/* Interactions
		================================================= */
		function interaction() {
			banner.addEventListener('click', function() {
				window.open(window.clickTag, "_blank");
			});

			banner.addEventListener('mouseenter', function()
			{
				mouseObj.mouseOver = true;
			});
			banner.addEventListener('mouseleave', function()
			{
				mouseObj.mouseOver = false;
			});
			banner.addEventListener("mousemove", function(e) {
				// get mouse position
				mouseObj.x = e.clientX;
				mouseObj.y = e.clientY;
			});
		}

		function onTick()
		{
			// if mouseOver is undefined, mouse has never been on banner
			if(mouseObj.mouseOver == undefined) return;

			var mouseX = mouseObj.x;
			var mouseY = mouseObj.y;

			// if mouseOver is false overwrite mouseposition with center position
			if(!mouseObj.mouseOver)
			{
				mouseX = width / 2;
				mouseY = height / 2;
			}

			// get center of image
			var imageX = width / 2;
			var imageY = height / 2;

			// get distance in both x and y axis
			var dx = mouseX - imageX;
			var dy = mouseY - imageY;

			var easing = Sine.easeOut;
			var time = 1.25;
			var factor = 2.0;

			TweenMax.to(bg_0_in, time, {x: (dx / 40) * factor, y: (dy / 80) * factor, ease: easing});
			TweenMax.to(bg_1_in, time, {x: (dx / 30) * factor, y: (dy / 60) * factor, ease: easing});
			TweenMax.to(person_in, time, {x: (dx / 20) * factor, y: (dy / 40) * factor, ease: easing});
		}

		function startMouseInteractivity()
		{
			TweenMax.ticker.addEventListener('tick', onTick);
		}

		function stopMouseInteractivity()
		{
			TweenMax.ticker.removeEventListener('tick', onTick);
		}

		/* Helpers
		================================================= */
		function stripFileName (str)
		{
			return str.replace(/(url\(|\)|'|")/gi, '').split('/').slice(-1)[0];
		}

		function toArray(obj, reversed)
		{
			var l = obj.length, i, out = [];
			for(i = 0; i < l; i++) out[i] = obj[i];
			if(!reversed) return out;
			else return out.reverse();
		}

		/* Scrubber
		================================================= */
		function scrubber(tl) {
			if (debug) {
				bannerboy.include(["../bannerboy_scrubber.min.js"], function() {
					if (bannerboy.scrubberController)
					{
						bannerboy.scrubberController.scrubberHeight = 200;
						bannerboy.scrubberController.create({"main timeline": tl});
					}
				});
			}
		}
	});
};